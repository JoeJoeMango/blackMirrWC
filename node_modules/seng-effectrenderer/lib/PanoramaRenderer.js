"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _sengDisposable3 = _interopRequireDefault(require("seng-disposable"));

var _ImageEffectRenderer = _interopRequireDefault(require("./ImageEffectRenderer"));

/**
 * Created by johan on 28-12-2017.
 */
var MouseButton = function MouseButton() {
  Object.defineProperty(this, "press", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: false
  });
  Object.defineProperty(this, "down", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: false
  });
  Object.defineProperty(this, "oldDown", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: false
  });
  Object.defineProperty(this, "hit", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: false
  });
  Object.defineProperty(this, "downTime", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: 0
  });
};

var MouseListener =
/*#__PURE__*/
function (_sengDisposable) {
  (0, _inheritsLoose2.default)(MouseListener, _sengDisposable);

  function MouseListener(canvas) {
    var _this;

    _this = _sengDisposable.call(this) || this;
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "canvas", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "mousePos", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: new Float32Array([0, 0])
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "previousMousePos", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: new Float32Array([0, 0])
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "mouseVelocity", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: new Float32Array([0, 0])
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "normalized", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: new Float32Array([0, 0])
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "mouseClickCallbacks", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: []
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "buttons", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: []
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "resetSpeed", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: false
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "touchMoveListener", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "endListener", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "mouseMoveListener", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), "onMouseStart", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value(event) {
        event.preventDefault();
        var isTouch = event instanceof TouchEvent;
        _this.resetSpeed = true;
        _this.buttons[isTouch ? 0 : event.which - 1].press = true;

        _this.setMouse(isTouch ? event.targetTouches[0] : event);

        for (var i = 0; i < _this.mouseClickCallbacks.length; i++) {
          _this.mouseClickCallbacks[i].call((0, _assertThisInitialized2.default)(_this));
        }
      }
    });
    _this.canvas = canvas;

    for (var i = 0; i < 3; i++) {
      _this.buttons.push(new MouseButton());
    }

    _this.touchMoveListener = function (e) {
      return _this.setMouse(e.targetTouches[0]);
    };

    _this.mouseMoveListener = function (e) {
      return _this.setMouse(e);
    };

    _this.endListener = function () {
      _this.buttons[0].press = false;
    };

    _this.canvas.addEventListener('touchstart', _this.onMouseStart, false);

    _this.canvas.addEventListener('touchmove', _this.touchMoveListener, false);

    _this.canvas.addEventListener('touchend', _this.endListener, false);

    _this.canvas.addEventListener('touchcancel', _this.endListener, false);

    _this.canvas.addEventListener('mousedown', _this.onMouseStart, false);

    _this.canvas.addEventListener('mousemove', _this.mouseMoveListener, false);

    _this.canvas.addEventListener('mouseup', _this.endListener, false);

    _this.canvas.addEventListener('mousecancel', _this.endListener, false);

    _this.canvas.addEventListener('mouseout', _this.endListener, false);

    return _this;
  }

  var _proto = MouseListener.prototype;

  _proto.setMouse = function setMouse(event) {
    this.mousePos[0] = event.pageX;
    this.mousePos[1] = event.pageY;
  };

  _proto.getNormalizedVelocity = function getNormalizedVelocity() {
    return this.mouseVelocity;
  };

  _proto.getMouseDown = function getMouseDown() {
    return this.buttons[0].press;
  };

  _proto.update = function update() {
    this.normalized[0] = this.mousePos[0] / this.canvas.clientWidth;
    this.normalized[1] = this.mousePos[1] / this.canvas.clientHeight;

    if (this.resetSpeed) {
      this.resetSpeed = false;
      this.mouseVelocity[0] = 0;
      this.mouseVelocity[1] = 0;
    } else {
      this.mouseVelocity[0] = this.normalized[0] - this.previousMousePos[0];
      this.mouseVelocity[1] = this.normalized[1] - this.previousMousePos[1];
    }

    this.previousMousePos[0] = this.normalized[0];
    this.previousMousePos[1] = this.normalized[1]; // this section makes sure a drag is not used as a click
    // when the mouse is released after a press longer than 0.25 sec, it is not a click

    for (var i = 0; i < 3; i++) {
      var button = this.buttons[i];
      button.hit = false;
      button.down = false;

      if (this.buttons[i].press) {
        if (button.downTime === 0) {
          button.down = true;
        }

        button.downTime++;
      } else {
        button.hit = button.downTime < 15 && button.oldDown;
        button.downTime = 0;
      }

      button.oldDown = button.press;
    }
  };

  _proto.dispose = function dispose() {
    if (!this.isDisposed()) {
      if (this.canvas) {
        this.canvas.removeEventListener('touchstart', this.onMouseStart, false);
        this.canvas.removeEventListener('touchmove', this.touchMoveListener, false);
        this.canvas.removeEventListener('touchend', this.endListener, false);
        this.canvas.removeEventListener('touchcancel', this.endListener, false);
        this.canvas.removeEventListener('mousedown', this.onMouseStart, false);
        this.canvas.removeEventListener('mousemove', this.mouseMoveListener, false);
        this.canvas.removeEventListener('mouseend', this.endListener, false);
        this.canvas.removeEventListener('mousecancel', this.endListener, false);
        this.canvas.removeEventListener('mouseout', this.endListener, false);
      }

      this.normalized = null;
      this.mouseVelocity = null;
      this.previousMousePos = null;
    }

    _sengDisposable.prototype.dispose.call(this);
  };

  return MouseListener;
}(_sengDisposable3.default);

var PanoramaRenderer =
/*#__PURE__*/
function (_sengDisposable2) {
  (0, _inheritsLoose2.default)(PanoramaRenderer, _sengDisposable2);

  function PanoramaRenderer(canvasParent, image, fovDegrees, rotateInertia, smoothness) {
    var _this2;

    if (fovDegrees === void 0) {
      fovDegrees = 70;
    }

    if (rotateInertia === void 0) {
      rotateInertia = 0.95;
    }

    if (smoothness === void 0) {
      smoothness = 0.75;
    }

    _this2 = _sengDisposable2.call(this) || this;
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "imageEffectRender", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "mouseListener", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "rotateX", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "rotateY", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "rotateSpeedX", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "rotateSpeedY", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "inertia", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "smoothness", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "fovV", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "isReady", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: false
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this2), "animationLoop", {
      configurable: true,
      enumerable: true,
      writable: true,
      value: false
    });
    _this2.inertia = rotateInertia;
    _this2.fovV = fovDegrees;
    _this2.smoothness = smoothness;
    _this2.imageEffectRender = _ImageEffectRenderer.default.createTemporary(canvasParent, _this2.getShader(), false);

    _this2.imageEffectRender.addImage(image, 0, false, true, true);

    _this2.isReady = true;
    _this2.mouseListener = new MouseListener(_this2.imageEffectRender.getCanvas());
    return _this2;
  }

  var _proto2 = PanoramaRenderer.prototype;

  _proto2.init = function init() {
    this.play();
  };

  _proto2.play = function play() {
    this.animationLoop = true;
    this.update();
  };

  _proto2.pause = function pause() {
    this.animationLoop = false;
  };

  _proto2.updateSize = function updateSize() {
    this.imageEffectRender.updateSize();
  };

  _proto2.updateImage = function updateImage(image, clampHorizontal, clampVertical) {
    if (clampHorizontal === void 0) {
      clampHorizontal = true;
    }

    if (clampVertical === void 0) {
      clampVertical = true;
    }

    this.imageEffectRender.addImage(image, 0, clampHorizontal, clampVertical, true);
  };

  _proto2.update = function update() {
    var _this3 = this;

    if (this.isDisposed() || !this.animationLoop) return;

    if (this.isReady) {
      this.mouseListener.update(); // aspect ratio can change

      var c = this.imageEffectRender.getCanvas();
      var aspect = c.width / c.height;
      var degToRad = Math.PI / 180;
      var z = 0.5 / Math.tan(this.fovV * (0.5 * degToRad));
      var fovH = Math.atan2(aspect * 0.5, z) * (2 * 180 / Math.PI);

      if (this.mouseListener.getMouseDown()) {
        var ms = this.mouseListener.getNormalizedVelocity();
        this.rotateSpeedX = this.lerp(-ms[0] * fovH, this.rotateSpeedX, this.smoothness);
        this.rotateSpeedY = this.lerp(ms[1] * this.fovV, this.rotateSpeedY, this.smoothness);
      } else {
        this.rotateSpeedX *= this.inertia;
        this.rotateSpeedY *= this.inertia;
      }

      this.rotateX += this.rotateSpeedX;
      this.rotateY += this.rotateSpeedY;
      if (this.rotateY > 90) this.rotateY = 90;
      if (this.rotateY < -90) this.rotateY = -90;
      this.imageEffectRender.setUniformVec2('uRotation', this.rotateX * degToRad, this.rotateY * degToRad);
      var height = Math.tan(this.fovV * 0.5);
      var width = height * aspect;
      this.imageEffectRender.setUniformVec3('uFrustumCorner', -width, height, 1);
      this.imageEffectRender.setUniformFloat('uAspect', aspect);
      this.imageEffectRender.draw();
    }

    window.requestAnimationFrame(function () {
      return _this3.update();
    });
  };

  _proto2.getShader = function getShader() {
    return "\n      uniform vec2 uRotation;\n\t\t\tuniform float uAspect;\n\t\t\tuniform vec3 uFrustumCorner;\n\t\t\t\n\t\t\tvec2 getEqUV(vec3 rd)\n      {\n        vec2 uv = vec2(atan(rd.z, rd.x), asin(rd.y));\n\t\t\t\tuv *= vec2(0.1591,0.3183);\n\t\t\t\tuv.y += 0.5;\n\t\t\t\treturn fract(uv);\n      }\n      mat2 getMatrix(float a)\n\t\t\t{\n\t\t\t\tfloat s = sin(a);\n\t\t\t\tfloat c = cos(a);\n\t\t\t\treturn mat2(c, -s, s, c);\n\t\t\t}\n      void mainImage( out vec4 c, vec2 p )\n      {\n        vec3 rd = vec3(vUV0 * 2. - 1., 1.) * uFrustumCorner;\n        rd = normalize(rd);\n        rd.yz *= getMatrix(-uRotation.y);\n        rd.xz *= getMatrix(uRotation.x);\n        c.xyz = texture(iChannel0, getEqUV(rd)).xyz;\n        c.w = 1.0;\n      }\n    ";
  };

  _proto2.lerp = function lerp(a, b, i) {
    return (1 - i) * a + i * b;
  };

  _proto2.dispose = function dispose() {
    if (!this.isDisposed()) {
      this.mouseListener.dispose();

      _ImageEffectRenderer.default.releaseTemporary(this.imageEffectRender);
    }

    _sengDisposable2.prototype.dispose.call(this);
  };

  return PanoramaRenderer;
}(_sengDisposable3.default);

exports.default = PanoramaRenderer;